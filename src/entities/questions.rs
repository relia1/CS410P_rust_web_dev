//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use crate::entities::lib::*;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::IntoParams;

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, ToSchema, IntoParams,
)]
#[sea_orm(table_name = "questions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub content: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::answers::Entity")]
    Answers,
    #[sea_orm(has_many = "super::question_tags::Entity")]
    QuestionTags,
}

impl Related<super::answers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Answers.def()
    }
}

impl Related<super::question_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QuestionTags.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::question_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::question_tags::Relation::Questions.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl IntoResponse for &Model {
    /// Converts a `&Question` into an HTTP response.
    ///
    /// # Returns
    ///
    /// A `Response` object with a status code of 200 OK and a JSON body containing the question data.
    fn into_response(self) -> Response {
        tracing::info!("{:?}", &self);
        (StatusCode::OK, Json(&self)).into_response()
    }
}
